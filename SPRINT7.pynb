{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "72ee75cc",
   "metadata": {},
   "source": [
    "## Nivel 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52a27bd4",
   "metadata": {},
   "source": [
    "## Exercici 1\n",
    "### Calculadora de l'índex de massa corporal\n",
    "- Escriu una funció que calculi l'IMC ingressat per l'usuari/ària, és a dir, qui ho executi haurà d'ingressar aquestes dades. Pots obtenir més informació del seu càlcul en:\n",
    "- Indice de masa corporal IMC que es y como se calcula.\n",
    "La funció ha de classificar el resultat en les seves respectives categories\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7dbf06b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calcular_imc(kg: float, metros: float) -> dict:\n",
    "    \n",
    "    if kg < 0 or kg > 250 or metros < 0 or metros > 2.80:\n",
    "        return None\n",
    "    \n",
    "    indice = kg / (metros*metros)\n",
    "    categoria = None\n",
    "    if indice < 16:\n",
    "        categoria = \"Desnutricion severa\"\n",
    "    elif indice >= 16.1 and indice < 18.5:\n",
    "        categoria = \"Desnutricion moderada\"\n",
    "    elif indice >= 18.5 and indice < 22:\n",
    "        categoria = \"Bajo peso\"\n",
    "    elif indice >= 22.1 and indice < 25:\n",
    "        categoria = \"Peso normal\"\n",
    "    elif indice >= 25 and indice < 30:\n",
    "        categoria = \"Sobrepeso\"\n",
    "    elif indice >= 30 and indice < 35:\n",
    "        categoria = \"Obesidad tipo I\"\n",
    "    elif indice >= 35 and indice < 40:\n",
    "        categoria = \"Obesidad tipo II\"\n",
    "    elif indice >= 40:\n",
    "        categoria = \"Obesidad tipo III\"\n",
    "\n",
    "    resultado = {\n",
    "        \"index\": indice,\n",
    "        \"category\": categoria\n",
    "    }\n",
    "\n",
    "    return resultado"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d104589d",
   "metadata": {},
   "source": [
    "### Explicación\n",
    "\n",
    "Este código define la función `calcular_imc` que calcula el Índice de Masa Corporal (IMC) de una persona a partir de su peso (en kg) y altura (en metros). Primero, valida que los valores ingresados esten entre los rangos que consideramos oportunos: el peso debe estar entre 0 y 250 kg, y la altura entre 0 y 2.80 metros. Si alguno de estos valores no es válido, la función devuelve `None`. Después, calcula el IMC usando la fórmula `IMC = kg / (metros^2)` y asigna una categoría dependiendo del resultado, que puede ser desde \"Desnutrición severa\" hasta \"Obesidad tipo III\".\n",
    "\n",
    "Después, el programa pide al usuario que ingrese su peso y altura, y utiliza la función `calcular_imc` para obtener el IMC y la categoría correspondiente. Estos valores los extrae del diccionario que devuelve la funcióin y se los muestra al usuario en un mensaje, redondeando el IMC a dos decimales. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f44c0545",
   "metadata": {},
   "source": [
    "## Exercici 2\n",
    "### Convertidor de temperatures.\n",
    "\n",
    "- Existeixen diverses unitats de temperatura utilitzades en diferents contextos i regions.\n",
    "- Les més comunes són Celsius (°C), Fahrenheit (°F) i Kelvin (K).\n",
    "- També existeixen altres unitats com Rankine (°Ra) i Réaumur (°Re). \n",
    "- Selecciona almenys 2 conversors, de tal manera que en introduir una temperatura retorni, com a mínim, dues conversions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "27721e9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convertir_desde_celsius(celsius: float) -> dict:\n",
    "    # (C × 9 / 5) + 32   Formula para calcular fahrenheit desde celsius\n",
    "    fahrenheit = (celsius * 9 / 5) + 32\n",
    "    # C + 273.15         Formula para calcular kelvin desde celsius\n",
    "    kelvin = celsius + 273.15\n",
    "\n",
    "    resultado = {\n",
    "       \"celsius\": celsius,\n",
    "       \"fahrenheit\": fahrenheit,\n",
    "       \"kelvin\": kelvin\n",
    "    }\n",
    "\n",
    "    return resultado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f73a4b4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La temperatura 28.5 celsius es: fahrenheit 83.3 y kelvin 301.65\n"
     ]
    }
   ],
   "source": [
    "# Opcion1 Llamar a la funcion con un numero inventado, 28.5 grados\n",
    "temperaturas = convertir_desde_celsius(28.5)\n",
    "print(f\"La temperatura {temperaturas[\"celsius\"]} celsius es: fahrenheit {temperaturas[\"fahrenheit\"]} y kelvin {temperaturas[\"kelvin\"]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bcb1f88b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La temperatura 33.5 celsius es: fahrenheit 92.3 y kelvin 306.65\n"
     ]
    }
   ],
   "source": [
    "# Opcion2 Llamar a la funcion con un numero leido desde teclado\n",
    "grados_c = float(input(\"Introduce un numero (grados celsius): \"))\n",
    "temperaturas_grados = convertir_desde_celsius(grados_c)\n",
    "print(f\"La temperatura {temperaturas_grados[\"celsius\"]} celsius es: fahrenheit {temperaturas_grados[\"fahrenheit\"]} y kelvin {temperaturas_grados[\"kelvin\"]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcbb5150",
   "metadata": {},
   "source": [
    "#### Explicación\n",
    "\n",
    "Defino una función llamada `convertir_desde_celsius`, que convierte una temperatura en grados Celsius a las escalas Fahrenheit y Kelvin. Primero, usa la fórmula `(C × 9 / 5) + 32` para calcular la temperatura en Fahrenheit, y la fórmula `C + 273.15` para calcular la temperatura en Kelvin. Luego, creo un diccionario con los tres valores: Celsius, Fahrenheit y Kelvin, y lo devuelve como resultado.\n",
    "\n",
    "Luego vemos dos formas de usar la función. En la primera, se llama a la función con un valor fijo de 28.5 grados Celsius, y luego imprime la conversión a Fahrenheit y Kelvin. En la segunda, pedimos al usuario que ingrese un valor de temperatura en grados Celsius. Después, el programa llama a la función con ese valor y muestra la conversión en fahrenheit y kelvin. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3572612b",
   "metadata": {},
   "source": [
    "## Exercici 3\n",
    "### Comptador de paraules d'un text.\n",
    "- Escriu una funció que donat un text, mostri les vegades que apareix cada paraula.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "85414280",
   "metadata": {},
   "outputs": [],
   "source": [
    "def contar_palabras(texto: str) -> dict:\n",
    "    resultado = {}\n",
    "    texto_minus = texto.lower()\n",
    "\n",
    "    simbolos_exclusion = [\"!\", \"¡\", \"?\", \"¿\", \".\", \":\", \",\", \";\"]\n",
    "    for simbolo in simbolos_exclusion:\n",
    "        texto_minus = texto_minus.replace(simbolo, \" \")\n",
    "\n",
    "    palabras = texto_minus.split(\" \")\n",
    "    for palabra in palabras:\n",
    "        if palabra in resultado:\n",
    "            veces = resultado[palabra]\n",
    "            resultado[palabra] = veces + 1\n",
    "        else:\n",
    "            resultado[palabra] = 1\n",
    "\n",
    "    del resultado[\"\"]\n",
    "\n",
    "    return resultado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "49137d41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El resultado para la frase: 'Hola, como estas? Espero que bien. hola de nuevo, hasta pronto.' es\n",
      "{'hola': 2, 'como': 1, 'estas': 1, 'espero': 1, 'que': 1, 'bien': 1, 'de': 1, 'nuevo': 1, 'hasta': 1, 'pronto': 1}\n"
     ]
    }
   ],
   "source": [
    "frase_introducida = input(\"Introduce una frase: \")\n",
    "resultado_conteo_palabras = contar_palabras(frase_introducida)\n",
    "print(f\"El resultado para la frase: '{frase_introducida}' es\")\n",
    "print(resultado_conteo_palabras)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "012d5194",
   "metadata": {},
   "source": [
    "#### Explicación\n",
    "\n",
    "Este código define la función `contar_palabras`, que cuenta cuántas veces aparece cada palabra en un texto ingresado. Primero, convierte todo el texto a minúsculas para asegurarnos de que no haya distinción entre mayúsculas y minúsculas. Luego, elimina los símbolos de puntuación (como \"!\", \".\", \"?\",...) reemplazándolos por espacios. A continuación, divide el texto en palabras utilizando el espacio como separador. Después, recorre cada palabra y actualiza un diccionario que guarda la cantidad de veces que aparece cada palabra.\n",
    "\n",
    "Después el programa solicita al usuario que introduzca una frase. Llama a la función `contar_palabras` con la frase que le indicamos y muestra el resultado en un diccionario, donde cada clave es una palabra y su valor es la cantidad de veces que aparece en el texto. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6764e14",
   "metadata": {},
   "source": [
    "## Exercici 4\n",
    "### Diccionari invers.\n",
    "- Resulta que el client té una enquesta molt antiga que s'emmagatzema en un diccionari i els resultats els necessita al revés\n",
    "- És a dir, intercanviats les claus i els valors. \n",
    "- Els valors i claus en el diccionari original són únics; si aquest no és el cas, la funció hauria d'imprimir un missatge d'advertiment.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0b4dc041",
   "metadata": {},
   "outputs": [],
   "source": [
    "def reverse_dictionary(original_dict: dict) -> dict:\n",
    "    values = original_dict.values()\n",
    "    values_set = set(values)\n",
    "    if len(values) != len(values_set):\n",
    "        return None\n",
    "    else:\n",
    "        resultado = {}\n",
    "        for key, value in original_dict.items():\n",
    "            resultado[value] = key\n",
    "\n",
    "        return resultado\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5a6a12b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para el diccionario original {'a': 1, 'b': 2, 'c': 3}\n",
      "el resultado invertido es {1: 'a', 2: 'b', 3: 'c'}\n",
      "Para el diccionario original {'x': 'apple', 'y': 'banana', 'c': 'banana'}\n",
      "multiple keys for one value\n"
     ]
    }
   ],
   "source": [
    "test_1_original = { \"a\": 1, \"b\": 2, \"c\": 3 }\n",
    "test_1_invertido = reverse_dictionary(test_1_original)\n",
    "print(f\"Para el diccionario original {test_1_original}\")\n",
    "if test_1_invertido is None:\n",
    "    print(\"multiple keys for one value\")\n",
    "else:\n",
    "    print(f\"el resultado invertido es {test_1_invertido}\")\n",
    "\n",
    "\n",
    "test_2_original = { \"x\": \"apple\", \"y\": \"banana\", \"c\": \"banana\" }\n",
    "test_2_invertido = reverse_dictionary(test_2_original)\n",
    "print(f\"Para el diccionario original {test_2_original}\")\n",
    "if test_2_invertido is None:\n",
    "    print(\"multiple keys for one value\")\n",
    "else:\n",
    "    print(f\"el resultado invertido es {test_2_invertido}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d985dbb1",
   "metadata": {},
   "source": [
    "#### Explicación\n",
    "\n",
    "Defino una función llamada reverse_dictionary, que invierte un diccionario, cambiando las claves por los valores y viceversa. Antes de hacerlo, la función verifica si hay valores repetidos en el diccionario original. Si hay valores duplicados, devuelve None, ya que no se puede invertir el diccionario de manera correcta (un valor no puede corresponder a dos claves distintas). Si no hay duplicados, crea un nuevo diccionario donde las claves originales se convierten en valores y los valores originales se convierten en claves.\n",
    "\n",
    "Después se realizan dos pruebas. En la primera, se invierte un diccionario con claves y valores únicos, y se imprime el diccionario invertido. En la segunda prueba, se intenta invertir un diccionario con valores repetidos, lo que devuelve None y muestra un mensaje de error. Así, el programa permite invertir diccionarios, pero solo si sus valores son únicos."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25c1eb14",
   "metadata": {},
   "source": [
    "# Nivell 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b7a28bc",
   "metadata": {},
   "source": [
    "## Exercici 1\n",
    "### Diccionari invers amb duplicats\n",
    "- Continuant amb l'exercici 4 del nivell 1: \n",
    "  - al client es va oblidar de comentar un detall i resulta que els valors en el diccionari original poden duplicar-se i més,\n",
    "  - per la qual cosa les claus intercanviades poden tenir duplicats. \n",
    "  - En aquest cas, en l'exercici anterior imprimies un missatge d'advertiment,\n",
    "  - ara, els valors del diccionari resultant hauran d'emmagatzemar-se com una llista. Tingues en compte que si és un valor únic no ha de ser una llista.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e817a18e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def reverse_dictionary_plus(original_dict: dict) -> dict:\n",
    "    resultado = {}\n",
    "\n",
    "    for key, value in original_dict.items():\n",
    "        new_key = value\n",
    "        if new_key in resultado:\n",
    "            value_from_result = resultado[new_key]\n",
    "            if type(value_from_result) == str:\n",
    "                new_value = [value_from_result, key]\n",
    "                resultado[new_key] = new_value\n",
    "            elif type(value_from_result) == list:\n",
    "                value_from_result.append(key)\n",
    "                resultado[new_key] = value_from_result\n",
    "        else:\n",
    "            new_value = key\n",
    "            resultado[new_key] = new_value\n",
    "\n",
    "    return resultado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3024676c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para el diccionario original {'x': 'apple', 'y': 'banana', 'c': 'banana', 'd': 'banana'}\n",
      "el resultado es {'apple': 'x', 'banana': ['y', 'c', 'd']}\n"
     ]
    }
   ],
   "source": [
    "test_3_original = { \"x\": \"apple\", \"y\": \"banana\", \"c\": \"banana\", \"d\": \"banana\"}\n",
    "test_reverse_plus = reverse_dictionary_plus(test_3_original)\n",
    "\n",
    "print(f\"Para el diccionario original {test_3_original}\")\n",
    "print(f\"el resultado es {test_reverse_plus}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02e4e64c",
   "metadata": {},
   "source": [
    "#### Explicación\n",
    "\n",
    "Definimos una función llamada `reverse_dictionary_plus`, que invierte un diccionario. En este caso permite que varios elementos compartan el mismo valor original. Si varias claves tienen el mismo valor, en lugar de sobrescribir la clave, se almacenan en una lista bajo ese valor invertido.\n",
    "\n",
    "Para cada par clave-valor del diccionario original, verifica si el valor ya existe en el diccionario resultante. Si no existe, agrega el valor invertido con la clave original. Si ya existe, verifica si el valor en el diccionario resultante es una lista. Si lo es, agrega la nueva clave a la lista; si no, crea una lista con la clave original y la nueva clave. Esto permite que las claves que tienen el mismo valor en el diccionario original se agrupen en una lista.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab9a791e",
   "metadata": {},
   "source": [
    "## Exercici 2\n",
    "### Conversió de tipus de dades\n",
    "- El client rep una llista de dades i necessita generar dues llistes.\n",
    "- La primera on estaran tots els elements que es van poder convertir en flotants i l'altra on estan els elements que no es van poder convertir. \n",
    "- Exemple de la llista que rep el client: [ '1.3', 'one' , '1e10' , 'seven', '3-1/2', ('2',1,1.4,'not-a-number'), [1,2,'3','3.4']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "27193da0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def conversion(lista_elementos: list | tuple, floatings = [], non_floatings = []) -> tuple:\n",
    "    flotantes = floatings\n",
    "    no_flotantes = non_floatings\n",
    "\n",
    "    for elemento in lista_elementos:\n",
    "        if type(elemento) == tuple or type(elemento) == list:\n",
    "            conversion(elemento, flotantes, no_flotantes)\n",
    "        else:\n",
    "            try:\n",
    "                valor_flotante = float(elemento)\n",
    "                flotantes.append(valor_flotante)\n",
    "            except:\n",
    "                no_flotantes.append(elemento)\n",
    "\n",
    "    return (flotantes, no_flotantes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "044a3773",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para los siguientes datos: ['1.3', 'one', '1e10', 'seven', '3-1/2', ('2', 1, 1.4, 'not-a-number'), [1, 2, '3', '3.4']]\n",
      "el resultado es\n",
      "- Flotantes: [1.3, 10000000000.0, 2.0, 1.0, 1.4, 1.0, 2.0, 3.0, 3.4, 1.3, 10000000000.0, 2.0, 1.0, 1.4, 1.0, 2.0, 3.0, 3.4, 1.3, 10000000000.0, 2.0, 1.0, 1.4, 1.0, 2.0, 3.0, 3.4, 1.3, 10000000000.0, 2.0, 1.0, 1.4, 1.0, 2.0, 3.0, 3.4]\n",
      "- NO Flotantes: ['one', 'seven', '3-1/2', 'not-a-number', 'one', 'seven', '3-1/2', 'not-a-number', 'one', 'seven', '3-1/2', 'not-a-number', 'one', 'seven', '3-1/2', 'not-a-number']\n"
     ]
    }
   ],
   "source": [
    "entrada_test_4 = [ '1.3', 'one' , '1e10' , 'seven', '3-1/2', ('2',1,1.4,'not-a-number'), [1,2,'3','3.4']]\n",
    "floatings, non_floatings = conversion(entrada_test_4)\n",
    "print(f\"Para los siguientes datos: {entrada_test_4}\")\n",
    "print(f\"el resultado es\")\n",
    "print(f\"- Flotantes: {floatings}\")\n",
    "print(f\"- NO Flotantes: {non_floatings}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03ac1146",
   "metadata": {},
   "source": [
    "#### Explicación \n",
    "\n",
    "Defino una función llamada `conversion`, que clasifica los elementos de una lista o tupla en dos categorías: los que pueden convertirse en números flotantes o decimales y los que no. La función utiliza recursión para manejar sublistas o tuplas dentro de la lista principal. Para cada elemento, intenta convertirlo en flotante con la función `float`. Si se puede convertir en decimales, lo agrega a la lista de flotantes; si no, lo agrega a la lista de no flotantes. \n",
    "\n",
    "Después se prueba con una lista que contiene números como cadenas, palabras y sublistas/tuplas. El programa clasifica correctamente los elementos en dos listas: una para los flotantes y otra para los que no pueden convertirse en flotantes. Finalmente, muestra los dos grupos de elementos."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
